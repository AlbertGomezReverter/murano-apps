#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: com.mirantis.clearwater.components.base
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system
  conf: io.murano.configuration
  cw: com.mirantis.clearwater

Name: ClearwaterComponentBase

Properties:
  instance:
    Contract: $.class(res:LinuxMuranoInstance)
    Usage: Out

Methods:
  .init:
    Body:
      - $._environment: $.find(std:Environment).require()
      - $._componentName: typeinfo($).name.split(".").last()
      - $.parent: $.find(cw:Clearwater).require()

  getDeployScriptName:

  _createSecurityGroupRules:

  _createInstance:
    Body:
      - $instance: new(res:LinuxMuranoInstance, $this,
          name => format($._componentName),
          flavor => $.parent.flavorName,
          image => $.parent.osImageName,
          keyname => $.parent.keypair,
          securityGroupName => $._environment.securityGroupManager.defaultGroupName,
          assignFloatingIp => true)
      - Return: $instance

  _setUp:
    Body:
      - $.privateNetwork: $._environment.defaultNetworks.environment
      - $.instance: $._createInstance()


  _createReplacements:
    Arguments:
      - instance:
          Contract: $.class(res:LinuxMuranoInstance).notNull()
    Body:
      - Return:
          "%PUBLIC_IP%": $instance.floatingIpAddress
          "%PRIVATE_IP%": $.privateIp
          "%PRIVATE_NETWORK_CIDR%": $.privateNetwork.describe().cidr
          "%PRIVATE_NETWORK_GATEWAY%": $.privateNetwork.describe().gateway
          "%ZONE%": $.parent.dnsApp.zoneName
          "%DNSSEC_KEY%": $.parent.dnsApp.dnsSecKey
          "%DNS_PRIVATE_IP%": $.parent.dnsApp.privateIp
          "%ETCD_IP%": $.parent.etcdClusterIp or $.privateIp

  _getIp4ForNetwork:
    #Works only for IPv4 network with 255.255.255.0 netmask
    Arguments:
      - network:
          Contract: $.class(res:NeutronNetwork).notNull()
    Body:
      - $gateIp: $network.describe().gateway
      - $netAddr: $gateIp.split('.').take(3)
      - Return: $.instance.ipAddresses.where(list($.split('.').take(3)) = $netAddr).first(null)

  _getPrivateIp:
    Body:
      - Return: $._getIp4ForNetwork($.privateNetwork)

  addSecurityGroupRules:
    Arguments:
      - rules:
          Contract:
            - FromPort: $.int().notNull()
              ToPort: $.int().notNull()
              IpProtocol: $.string().notNull()
              External: $.bool().notNull()
              Ethertype: $.string().check($ in list(null, 'IPv4', 'IPv6'))
    Body:
      - $._environment.securityGroupManager.addGroupIngress($rules)


  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $._report(format('{0} deploy started', $._componentName))
          - $._setUp()
          - $.addSecurityGroupRules($._createSecurityGroupRules())
          - $.instance.deploy()
          - $.privateIp: $._getPrivateIp()
          - $replacements: $._createReplacements($.instance)
          - $file: sys:Resources.string($.getDeployScriptName()).replace($replacements)
          - conf:Linux.runCommand($.instance.agent, $file)
          - If: not $.parent.etcdClusterIp
            Then:
              - $.parent.setEtcdClusterIp($.privateIp)
          - $._report(format('{0} deploy finished', $._componentName))


  _report:
    Arguments:
      - message:
          Contract: $.string().notNull()
    Body:
      -  $._environment.reporter.report($this, $message)

