# SugarCRM Community Edition is a customer relationship management program developed by
# SugarCRM, Inc. Copyright (C) 2004-2013 SugarCRM Inc.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License version 3 as published by the
# Free Software Foundation with the addition of the following permission added
# to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
# IN WHICH THE COPYRIGHT IS OWNED BY SUGARCRM, SUGARCRM DISCLAIMS THE WARRANTY
# OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along with
# this program; if not, see http://www.gnu.org/licenses or write to the Free
# Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA.
#
# You can contact SugarCRM, Inc. headquarters at 10050 North Wolfe Road,
# SW2-130, Cupertino, CA 95014, USA. or at email address contact@sugarcrm.com.
#
# The interactive user interfaces in modified source and object code versions
# of this program must display Appropriate Legal Notices, as required under
# Section 5 of the GNU Affero General Public License version 3.
#
# In accordance with Section 7(b) of the GNU Affero General Public License version 3,
# these Appropriate Legal Notices must retain the display of the "Powered by
# SugarCRM" logo. If the display of the logo is not reasonably feasible for
# technical reasons, the Appropriate Legal Notices must display the words
# "Powered by SugarCRM".

Namespaces:
  =: io.murano.apps
  srv: io.murano.apps.apache
  db: io.murano.databases
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system


Name: SugarCRM

Extends: std:Application

Properties:
  server:
    Contract: $.class(srv:ApacheHttpServer).notNull()
  database:
    Contract: $.class(db:MySql).notNull()
  dbName:
    Contract: $.string().notNull()
  dbUser:
    Contract: $.string().notNull()
  dbPassword:
    Contract: $.string().notNull()
  adminUser:
    Contract: $.string().notNull()
  adminPassword:
    Contract: $.string().notNull()
  demoData:
    Contract: $.bool().notNull()

Methods:
  .init:
    Body:
      - $._environment: $.find(std:Environment).require()

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $._environment.reporter.report($this, 'Ensuring Apache is deployed.')
          - $.server.deploy()
          - $resources: new(sys:Resources)

          # create DB and user in mysql
          - $._environment.reporter.report($this, 'Ensuring Database is deployed.')
          - $.database.deploy()
          - $._environment.reporter.report($this, 'Creating sugar database and user')
          - $.database.createDatabase($.dbName)
          - $.database.createUser($.dbUser, $.dbPassword)
          - $.database.assignUser($.dbUser, $.dbName)

          # Deploy Sugar
          - $._environment.reporter.report($this, 'Installing SugarCRM')
          - $demoData: ''
          - If: $.demoData
            Then:
              - $demoData: 'yes'
            Else:
              - $demoData: 'no'

          - $template: $resources.yaml('deploySugar.template').bind(dict(
                dbHost => $.database.instance.ipAddresses[0],
                dbName => $.dbName,
                adminName => $.adminUser,
                adminPassword => $.adminPassword,
                dbUser => $.dbUser,
                dbPassword => $.dbPassword,
                host => $.server.instance.floatingIpAddress,
                demoData => $demoData
              ))
          - $.server.instance.agent.call($template, $resources)


          - $._environment.reporter.report($this, 'SugarCRM is installed')
          - If: $.server.instance.assignFloatingIp
            Then:
              - $address: $.server.instance.floatingIpAddress + '/Sugar'
              - $._environment.reporter.report($this, format('SugarCRM is running at http://{0}', $address))
          - $.setAttr(deployed, true)

  clear:
    Usage: Action
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('reset.template').bind(dict(withData=>false))
      - $.server.instance.agent.call($template, $resources)

  populateDemoData:
    Usage: Action
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('reset.template').bind(dict(withData=>true))
      - $.server.instance.agent.call($template, $resources)
