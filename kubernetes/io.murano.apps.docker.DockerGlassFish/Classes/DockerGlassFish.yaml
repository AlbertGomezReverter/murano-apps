Namespaces:
  =: io.murano.apps.docker
  std: io.murano

Name: DockerGlassFish

Extends: DockerApplication

Properties:
  name:
    Contract: $.string().notNull()

  publish:
    Contract: $.bool().notNull()
    Default: true

  password:
    Contract: $.string().notNull()

  adminPort:
    Contract: $.int().check($ > 0 and $ < 65536)
    Default: 4848

  httpPort:
    Contract: $.int().check($ > 0 and $ < 65536)
    Default: 8080

  httpsPort:
    Contract: $.int().check($ > 0 and $ < 65536)
    Default: 8181


Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()
      - $._scope: switch($.publish, $ => public, not $ => internal)


  getContainer:
    Body:
      Return:
        name: $.name
        image: 'tutum/glassfish'
        env:
          GLASSFISH_PASS: $.password
        ports:
          - port: $.adminPort
            scope: $._scope
          - port: $.httpPort
            scope: $._scope
          - port: $.httpsPort
            scope: $._scope


  onInstallationStart:
    Body:
      - $._environment.reporter.report($this, 'Installing GlassFish')


  onInstallationFinish:
    Body:
      - If: $.publish
        Then:
          - $adminEndpoints: join(', ', $.applicationEndpoints.
              where($.scope = $this._scope and $.containerPort = $this.adminPort).
              select(format('http://{0}:{1}', $.address, $.port)))
          - $httpEndpoints: join(', ', $.applicationEndpoints.
              where($.scope = $this._scope and $.containerPort = $this.httpPort).
              select(format('http://{0}:{1}', $.address, $.port)))
          - $httpsEndpoints: join(', ', $.applicationEndpoints.
              where($.scope = $this._scope and $.containerPort = $this.httpsPort).
              select(format('https://{0}:{1}', $.address, $.port)))

          - $._environment.reporter.report(
              $this,
              'GlassFish {0} is available at {1} (admin) and {2}/{3} (apps)'.format(
                $.name, $adminEndpoints, $httpEndpoints, $httpsEndpoints))
        Else:
          - $._environment.reporter.report($this, 'GlassFish {0} has deployed but is not accessible from outside'.format($.name))
