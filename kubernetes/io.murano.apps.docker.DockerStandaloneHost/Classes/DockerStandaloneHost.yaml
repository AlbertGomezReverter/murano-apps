Namespaces:
  =: io.murano.apps.docker
  res: io.murano.resources
  std: io.murano
  sys: io.murano.system

Name: DockerStandaloneHost

Extends: 
  - DockerContainerHost

Properties:  
  name:
    Contract: $.string().notNull()

  instance:
    Contract: $.class(res:LinuxMuranoInstance).notNull()

  applicationEndpoints:
    Contract:
      - port: $.int().notNull().check($ > 0)
        address: $.string().notNull()
        scope: $.string().notNull().check($ in list(public, cloud, internal))
        applicationPort: $.class(ApplicationPort).notNull()
        applicationName: $.string().notNull()
    Default: []
    Usage: Out


Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()  
  

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $._environment.reporter.report($this, 'Setup Security Groups for Docker Server')
          - $securityGroupIngress:
              - ToPort: 2375
                FromPort: 2375
                IpProtocol: tcp
                External: true
          - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          
          - $._environment.reporter.report($this, 'Create VM for Docker Server')
          - $.instance.deploy()
          
          - $._environment.reporter.report($this, 'Setting Up Docker Server')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('DeployDocker.template')
          - $.instance.agent.call($template, $resources)
          - $._environment.reporter.report($this, 'Docker Server is up and running')
          
          - $.setAttr(deployed, true)


  hostContainer:
    Arguments:
      - applicationName:
          Contract: $.string().notNull()
      - image:
          Contract: $.string().notNull()
      - commands:
          Contract:
            - $.string().notNull()
          Default: []
      - env:
          Contract:
            $.string().notNull(): $.string().notNull()
          Default: {}
      - ports:
          Contract:
            - $.class(ApplicationPort)
          Default: []
      - volumes:
          Contract:
            $.string().notNull(): $.class(DockerVolume).notNull()
          Default: {}
    Body:
      - $.deploy()
      - $portBindings: {}
      - $newEndpoints: []
      - $._pullImage(instance => $.instance, image => $image)
      - For: applicationPort
        In: $ports
        Do:
          - If: $applicationPort.scope != private
            Then:
              - $hostPort: $._acquirePort($applicationPort, $applicationName)
              - $containerPort: $applicationPort.port
              - $portBindings[$containerPort]:
                  HostPort: $hostPort
                  HostIP: '0.0.0.0'
              - If: $applicationPort.scope = public
                Then:
                  - $rule:
                      - ToPort: $hostPort
                        FromPort: $hostPort
                        IpProtocol: toLower($applicationPort.protocol)
                        External: true
                  - $._environment.securityGroupManager.addGroupIngress($rule)
              - $record:
                  port: $hostPort
                  address: $.getIp()
                  scope: cloud
                  applicationPort: $applicationPort
                  applicationName: $applicationName
              - $newEndpoints: $newEndpoints + list($record)
              - If: $applicationPort.scope = public and $.instance.floatingIpAddress != null
                Then:
                  - $record.address: $.instance.floatingIpAddress
                  - $record.scope: public
                  - $newEndpoints: $newEndpoints + list($record)

      - $volumeMap: {}
      - For: path
        In: $volumes
        Do:
          - $volume: $volumes.get($path)
          - If: $volume.getType() = HostDir
            Then:
              - $hostDir: $volume.getParameters()
              - $volumeMap[$hostDir]: $path

      - $._environment.reporter.report($this, 'Adding Docker Application')
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('dockerApp.hot').bind(dict(
            dockerResourceName => $._getResourceName($applicationName),
            dockerServer => $.getIp(),
            dockerImage => $image,
            dockerEnv => $env,
            dockerAppPorts => list($ports.select($this._getPortSpec($))),
            dockerPortBindings => $portBindings,
            dockerVolumes => $volumeMap
          ))
      - $._removeApplicationEndpoints($applicationName)
      - $.applicationEndpoints: $.applicationEndpoints + $newEndpoints
      - $._environment.stack.updateTemplate($template)
      - $._environment.stack.push()
      - Return: $.getEndpoints($applicationName)


  getEndpoints:
    Arguments:
      - applicationName:
          Contract: $.string().notNull()
    Body:
      - Return: $.applicationEndpoints.where($.applicationName = $applicationName)


  _getPortSpec:
    Arguments:
      - applicationPort:
          Contract: $.class(ApplicationPort).notNull()
    Body:
      - If: $applicationPort.protocol = UDP
        Then:
          - Return: format('{0}/udp', $applicationPort.port)
        Else:
          - Return: str($applicationPort.port)


  _pullImage:
    Arguments:
      - instance:
          Contract: $.class(res:Instance).notNull()
      - image:
          Contract: $.string().notNull()
    Body:
      - $._environment.reporter.report($this, 'Pulling app image {0}'.format($image))
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('PullImage.template').bind(dict(
          image => $image
         ))
      - $instance.agent.call($template, $resources)
      - $._environment.reporter.report($this, 'Image saved')


  _acquirePort:
    Arguments:
      - applicationPort:
          Contract: $.class(ApplicationPort).notNull()
      - applicationName:
          Contract: $.string().notNull()
    Body:
      - $portMap: $.getAttr(portMap, dict())
      - $applicationPorts: $.getAttr(applicationPorts, dict())
      - $key: format('{0}-{1}-{2}', $applicationPort.port, $applicationPort.protocol, $applicationName)
      - If: $key in $applicationPorts
        Then:
          - Return: $applicationPorts[$key]

      - $port: $applicationPort.port
      - If: $port in $portMap
        Then:
          - $port: 1025
      - While: $port in $portMap
        Do:
          $port: $port + 1

      - $portMap[$port]: $applicationName
      - $applicationPorts[$key]: $port

      - $.setAttr(portMap, $portMap)
      - $.setAttr(applicationPorts, $applicationPorts)
      - Return: $port


  _releaseApplicationPorts:
    Arguments:
      - applicationName:
          Contract: $.string().notNull()
    Body:
      - $portMap: $.getAttr(portMap, dict())
      - $applicationPorts: $.getAttr(applicationPorts, dict())
      - $newPortMap: {}
      - $newApplicationPorts: {}
      - $portsToDelete: []
      - For: port
        In: $portMap.keys()
        Do:
          - $value: $portMap.get($port)
          - If: $value = $applicationName
            Then:
              - $portsToDelete: $portsToDelete + list($port)
            Else:
              - $newPortMap[$port]: $value
      - For: key
        In: $applicationPorts.keys()
        Do:
          - $value: $applicationPorts.get($port)
          - If: not $value in $portsToDelete
            Then:
              - $newApplicationPorts[$key]: $value
      - $.setAttr(portMap, $newPortMap)
      - $.setAttr(applicationPorts, $newApplicationPorts)


  _getResourceName:
    Arguments:
      - applicationName:
          Contract: $.string().notNull()
    Body:
      - Return: format('{0}-{1}', $applicationName, $.id())


  _removeApplicationEndpoints:
    Arguments:
      - applicationName:
          Contract: $.string().notNull()
    Body:
      - $.applicationEndpoints: $.applicationEndpoints.select($.applicationName != $applicationName)


  deleteContainer:
    Arguments:
      - name:
          Contract: $.string().notNull()
    Body:
      - $._environment.reporter.report($this, 'Deleting container {0}'.format($name))
      - $._removeApplicationEndpoints($name)
      - $._releaseApplicationPorts($name)
      - $patch:
          - op: remove
            path: format('/resources/{0}', $._getResourceName($name))
      - $stack: $._environment.stack.current()
      - $stack: $stack.patch($patch)
      - $._environment.stack.setTemplate($stack)
      - $._environment.stack.push()
      - $._environment.reporter.report($this, 'Container {0} deleted'.format($name))

  getIp:
    Body:
      - Return: $.instance.ipAddresses[0]
