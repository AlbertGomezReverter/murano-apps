Namespaces:
  =: io.murano.apps.docker.kubernetes
  docker: io.murano.apps.docker
  std: io.murano
  sys: io.murano.system

Name: KubernetesPod

Extends:
  - docker:DockerContainerHost
  - docker:DockerHelpers

Properties:
  name:
    Contract: $.string().notNull()

  kubernetesCluster:
    Contract: $.class(KubernetesCluster).notNull()

  labels:
    Contract: $.string().notNull()  # convert to key-value map as soon as it will be possible to input it in UI
    Default: ''

  replicationFactor:
    Contract: $.int().notNull().check($ >= 0)


Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()

      - $podName: $._getPodName()
      - $podDefinition: $.getAttr(lastPodDeployed, null)
      - If: $podDefinition = null
        Then:
          - $podDefinition:
              id: $podName
              kind: Pod
              apiVersion: v1beta1
              desiredState:
                manifest:
                  version: v1beta1
                  id: $podName
                  containers: []
                  volumes: []
              labels: $._getPodLabels($podName)

          - $.setAttr(lastPodDeployed, $podDefinition)
      - $._podDefinition: $podDefinition
      - $.setAttr(lastReplicationFactor, $.getAttr(lastReplicationFactor, $.replicationFactor))

  _getPodName:
    Body:
      - Return: toLower($.name)

  _getPodLabels:
    Arguments:
      - podName:
          Contract: $.string().notNull()
    Body:
      Return: $.labels2Map(toLower($.labels)).mergeWith(dict(id => $podName))

  hostContainer:
    Arguments:
      - applicationName:
          Contract: $.string().notNull()
      - image:
          Contract: $.string().notNull()
      - commands:
          Contract:
            - $.string().notNull()
          Default: []
      - env:
          Contract:
            $.string().notNull(): $.string().notNull()
          Default: {}
      - ports:
          Contract:
            - $.class(docker:ApplicationPort)
          Default: []
      - volumes:
          Contract:
            $.string().notNull(): $.class(docker:DockerVolume).notNull()
          Default: {}
    Body:
      - $._deleteContainer($applicationName)

      - $container:
          name: toLower($applicationName)
          image: $image
          command: $commands
          ports: $ports.select($this._getPortDefinition($))
          volumeMounts: $volumes.keys().select(dict(name => $this._generateVolumeName($env.get($)), mountPath => $))
          env: $env.keys().select(dict(key => $, value => $env.get($)))

      - $newVolumes: $volumes.keys().where(not $this._generateVolumeName($) in $._podDefinition.desiredState.volumes.name).
          select($this._buildVolumeEntry($volumes.get($)))

      - $diff:
          desiredState:
            manifest:
              containers: [$container]
              volumes: $newVolumes
      - $._podDefinition: $._podDefinition.mergeWith($diff)
      - $.deploy()
      - $._environment.reporter.report($, 'Creating services for Pod {0}'.format($.name))
      - $.kubernetesCluster.createServices(
            applicationName => $applicationName,
            applicationPorts => $ports,
            podId => $._getPodName())
      - Return: $.getEndpoints($applicationName)


  getEndpoints:
    Arguments:
      - applicationName:
          Contract: $.string().notNull()
    Body:
      - Return: $.kubernetesCluster.serviceEndpoints.where($.applicationName = $applicationName)


  _getPortDefinition:
    Arguments:
      - port:
          Contract: $.class(docker:ApplicationPort).notNull()
    Body:
      - $result:
          containerPort: $port.port
      - If: $port.scope = node
        Then:
          $result.hostPort: $port.port
      - Return: $result


  _buildVolumeEntry:
    Arguments:
      - volume:
          Contract: $.class(doc:DockerVolume).notNull()
    Body:
      - $type: $volume.getType()
      - Value: $type
        Match:
          HostDir:
            - $spec:
                hostDir:
                  path: $volume.getParameters()
          TempVolume:
            - $spec:
                emptyDir: {}
        Default:
          - Throw: UnknownDockerVolumeType
            Message: format('Unknown docker volume type {0}', $type)
      - Return:
          name: $._generateVolumeName($volume)
          source: $spec


  _deleteContainer:
    Arguments:
      - name:
          Contract: $.string().notNull()
    Body:
      - $lenBefore: len($._podDefinition.desiredState.manifest.containers) + len($._podDefinition.desiredState.manifest.volumes)
      - $newContainers: $._podDefinition.desiredState.manifest.containers.where($.name != $name)
      - $newVolumes: $._podDefinition.desiredState.manifest.volumes.where(
            $.name in $._podDefinition.desiredState.manifest.containers.volumeMounts.name)
      - If: len($newContainers) + len($newVolumes) != $lenBefore
        Then:
          - $._podDefinition.desiredState.manifest.containers: $newContainers
          - $._podDefinition.desiredState.manifest.volumes: $newVolumes


  deleteContainer:
    Arguments:
      - name:
          Contract: $.string().notNull()
    Body:
      - $._deleteContainer($name)
      - $.kubernetesCluster.destroyService(
            applicationName => $name,
            podId => $._getPodName())
      - $.deploy()


  _generateVolumeName:
    Arguments:
      - volume:
          Contract: $.class(docker:DockerVolume).notNull()
    Body:
      Return: toLower($volume.name)

  deploy:
    Body:
      - $prevPod: $.getAttr(lastPodDeployed, null)
      - $prevReplicationFactor: $.getAttr(lastReplicationFactor, 0)

      - $podDefinition: $._podDefinition
      - If: $prevPod != $podDefinition
        Then:
          - $._environment.reporter.report($, 'Deploying Pod {0}'.format($.name))
          - $.kubernetesCluster.createPod(
                definition => $podDefinition, isNew => not $.getAttr(deployed, false))
          - $.setAttr(lastPodDeployed, $podDefinition)
          - $.setAttr(deployed, true)

      - If: $.replicationFactor != $prevReplicationFactor or $prevPod != $podDefinition
        Then:
          - If: $.replicationFactor > 0
            Then:
              - $._environment.reporter.report($, 'Deploying Replication Controller for Pod {0}'.format($.name))
              - $rcDefinition: $._buildReplicationControllerDefinition($podDefinition)
              - $.kubernetesCluster.createReplicationController(
                    definition => $rcDefinition, isNew => $prevReplicationFactor = 0)
          - If: $.replicationFactor = 0 and $prevReplicationFactor > 0
            Then:
              - $.kubernetesCluster.destroyReplicationController($.__getReplicationControllerId())
          - $.setAttr(lastReplicationFactor, $.replicationFactor)

  _buildReplicationControllerDefinition:
    Arguments:
      - podDefinition:
          Contract: {}
    Body:
      Return:
        id: $._getReplicationControllerId()
        kind: ReplicationController
        apiVersion: v1beta1
        desiredState:
          replicas: $.replicationFactor
          replicaSelector:
            id: $._getPodName()
          podTemplate:
            desiredState: $podDefinition.desiredState
            labels: $podDefinition.labels

  _getReplicationControllerId:
    Body:
      - Return: $._getPodName().replace('pod-', 'rc-')
